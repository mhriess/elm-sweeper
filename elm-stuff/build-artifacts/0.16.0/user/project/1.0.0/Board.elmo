Elm.Board = Elm.Board || {};
Elm.Board.make = function (_elm) {
   "use strict";
   _elm.Board = _elm.Board || {};
   if (_elm.Board.values) return _elm.Board.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Square = Elm.Square.make(_elm);
   var _op = {};
   var Modify = F4(function (a,b,c,d) {    return {ctor: "Modify",_0: a,_1: b,_2: c,_3: d};});
   var viewSquare = F4(function (address,row,col,model) {    return A2($Square.view,A2($Signal.forwardTo,address,A3(Modify,row,col,model)),model);});
   var viewRow = F3(function (address,rowIndex,row) {
      return A2($Html.tr,_U.list([]),$Array.toList(A2($Array.indexedMap,A2(viewSquare,address,rowIndex),row)));
   });
   var view = F2(function (address,model) {
      return A2($Html.table,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "100%"}
                                              ,{ctor: "_Tuple2",_0: "height",_1: "500px"}
                                              ,{ctor: "_Tuple2",_0: "table-layout",_1: "fixed"}]))]),
      _U.list([A2($Html.tbody,_U.list([]),$Array.toList(A2($Array.indexedMap,viewRow(address),model)))]));
   });
   var find = F3(function (rowI,colI,model) {    var row = A2($Maybe.withDefault,$Array.empty,A2($Array.get,rowI,model));return A2($Array.get,colI,row);});
   var any$ = F3(function (cond,model,res) {
      any$: while (true) if (_U.eq(res,true) || $Array.isEmpty(model)) return res; else {
            var tail = A3($Array.slice,1,$Array.length(model),model);
            var head = A3($Array.slice,0,1,model);
            var headFirst = A2($Maybe.withDefault,$Array.empty,A2($Array.get,0,head));
            var _v0 = cond,_v1 = tail,_v2 = $Basics.not($Array.isEmpty(A2($Array.filter,cond,headFirst)));
            cond = _v0;
            model = _v1;
            res = _v2;
            continue any$;
         }
   });
   var any = F2(function (cond,model) {    return A3(any$,cond,model,false);});
   var getNeighbors = F3(function (row,col,model) {
      var flatten = F2(function (maybeNeighbor,neighbors) {
         var _p0 = maybeNeighbor;
         if (_p0.ctor === "Just") {
               return A2($List._op["::"],_p0._0,neighbors);
            } else {
               return neighbors;
            }
      });
      var bottomColIndex = col + 1;
      var middleColIndex = col;
      var upperColIndex = col - 1;
      var bottomRowIndex = row + 1;
      var bottomRow = A2($Maybe.withDefault,$Array.empty,A2($Array.get,bottomRowIndex,model));
      var bl = A2($Array.get,upperColIndex,bottomRow);
      var bm = A2($Array.get,col,bottomRow);
      var br = A2($Array.get,bottomColIndex,bottomRow);
      var middleRowIndex = row;
      var middleRow = A2($Maybe.withDefault,$Array.empty,A2($Array.get,middleRowIndex,model));
      var ml = A2($Array.get,upperColIndex,middleRow);
      var mr = A2($Array.get,bottomColIndex,middleRow);
      var upperRowIndex = row - 1;
      var upperRow = A2($Maybe.withDefault,$Array.empty,A2($Array.get,upperRowIndex,model));
      var ul = A2($Array.get,upperColIndex,upperRow);
      var um = A2($Array.get,middleColIndex,upperRow);
      var ur = A2($Array.get,bottomColIndex,upperRow);
      return A3($List.foldl,
      flatten,
      _U.list([]),
      A2($List._op["::"],
      ul,
      A2($List._op["::"],
      um,
      A2($List._op["::"],ur,A2($List._op["::"],ml,A2($List._op["::"],mr,A2($List._op["::"],bl,A2($List._op["::"],bm,A2($List._op["::"],br,_U.list([]))))))))));
   });
   var isNeighbor = F4(function (row1,col1,row2,col2) {    return _U.cmp($Basics.abs(row1 - row2),1) < 1 && _U.cmp($Basics.abs(col1 - col2),1) < 1;});
   var update = F2(function (action,model) {
      var _p1 = action;
      var _p5 = _p1._2;
      var _p4 = _p1._0;
      var _p3 = _p1._1;
      var _p2 = _p1._3;
      var updateSquare = F3(function (rowY,colY,square) {
         return _U.eq(_p4,rowY) && _U.eq(_p3,colY) ? A2($Square.update,_p2,_p5) : A4(isNeighbor,
         _p4,
         _p3,
         rowY,
         colY) && ($Basics.not(square.isMined) && $Basics.not(_p5.isMined)) ? A2($Square.update,_p2,square) : square;
      });
      return A2($Array.indexedMap,F2(function (rowIndex,row) {    return A2($Array.indexedMap,updateSquare(rowIndex),row);}),model);
   });
   var init = function (size) {
      return A2($Array.initialize,size,function (n) {    return A2($Array.initialize,size,function (m) {    return A3($Square.init,false,false,0);});});
   };
   return _elm.Board.values = {_op: _op
                              ,init: init
                              ,isNeighbor: isNeighbor
                              ,getNeighbors: getNeighbors
                              ,any: any
                              ,any$: any$
                              ,find: find
                              ,Modify: Modify
                              ,update: update
                              ,view: view
                              ,viewRow: viewRow
                              ,viewSquare: viewSquare};
};